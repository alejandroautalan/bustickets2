<?php

declare(strict_types=1);

namespace App\Admin;

use App\Entity\Pasaje;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Route\RouteCollectionInterface;
use Sonata\AdminBundle\Show\ShowMapper;
use Sonata\AdminBundle\Route\RouteCollection;
use Sonata\Form\Type\CollectionType;
use Sonata\Form\Type\DatePickerType;

use Sonata\AdminBundle\Admin\AdminInterface;
use Knp\Menu\ItemInterface as MenuItemInterface;


final class ViajeAdmin extends AbstractAdmin
{

    public function configureRoutes(RouteCollectionInterface $collection): void
    {
        $collection->add('asientos', 'asientos');
        $collection->add('ocuparAsiento', 'ocuparAsiento');

    }

    protected function configureDatagridFilters(DatagridMapper $filter): void
    {
        $filter
            ->add('id')
            ->add('origen')
            ->add('destino')
            ->add('distancia')
            ->add('fecha')
            ->add('tiempo')
            ->add('costo')
            ->add('estado')
        ;
    }

    protected function configureListFields(ListMapper $list): void
    {
        $list
            ->add('id')
            ->add('colectivo')
            ->add('origen')
            ->add('destino')
            ->add('distancia')
            ->add('fecha')
            ->add('tiempo')
            ->add('costo')
            ->add('estado')
            ->add(ListMapper::NAME_ACTIONS, null, [
                'actions' => [
                    'show' => [],
                    'edit' => [],
                    'delete' => [],
                    #'pasaje' => ['template' => 'ViajeAdmin/pasaje.html.twig']
                    'pasaje' => ['template' => 'ViajeAdmin/pasaje.html.twig'],
                    'ocuparAsiento' => ['template' => 'ViajeAdmin/ocupar.html.twig']
                ],
            ]);
    }

    protected function configureFormFields(FormMapper $form): void
    {
        $form
            #->add('id')
            #->add('pasajes')
            ->add('colectivo')
            ->add('origen')
            ->add('destino')
            ->add('distancia')
            ->add('fecha', DatePickerType::class,['format'=>'d-m-y'])
            ->add('tiempo')
            ->add('costo')
            ->add('estado')
            //->add('pasajes',CollectionType::class, ['by_reference' => false,
            //            'label' => 'Pasaje',
            //            #'disabled' => $disabled,
            //            'btn_add' => true,
            //            'required'   => true,
            //        ],
            //                    [
            //                        'edit' => 'inline',
            //                        'inline' => 'table',
            //                        'sortable' => 'position',
            //                    ])
                            #->add('pasajes')
                        ;
    }

    protected function configureShowFields(ShowMapper $show): void
    {
        $show
            ->add('id')
            ->add('origen')
            ->add('destino')
            ->add('distancia')
            ->add('fecha')
            ->add('tiempo')
            ->add('costo')
            ->add('estado')
        ;
    }

    protected function postPersist(object $object): void
    {
        parent::postPersist($object); // TODO: Change the autogenerated stub
        $em = $this->getModelManager()->getEntityManager(Pasaje::class);
        foreach ($object->getColectivo()->getAsientos() as $asiento ):
            $pasaje = new Pasaje();
            $pasaje->setAsiento($asiento);
            $pasaje->setEstado(0);
            $pasaje->setViaje($object);
            $pasaje->setCosto($object->getCosto());
            $em->persist($pasaje);
            $em->flush();
        endforeach;
    }
    
    protected function configureTabMenu(MenuItemInterface $menu, string $action, ?AdminInterface $childAdmin = null): void
    {
        if (!$childAdmin && !in_array($action, ['edit', 'show'])) {
            return;
        }

        $admin = $this->isChild() ? $this->getParent() : $this;
        $id = $admin->getRequest()->get('id');

        $menu->addChild('View', $admin->generateMenuUrl('show', ['id' => $id]));

        if ($this->isGranted('EDIT')) {
            $menu->addChild('Edit', $admin->generateMenuUrl('edit', ['id' => $id]));
        }

        if ($this->isGranted('LIST')) {
            $menu->addChild('Pasajes', $admin->generateMenuUrl('admin.pasaje.list', ['id' => $id]));
        }
    }
}
